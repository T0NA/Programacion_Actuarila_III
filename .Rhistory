install.packages ("rmarkdown")
install.packages("ggplot2")
install.packages("devtools")
a <- install.packages()
view (a)
a <- installed.packages()
view(a)
view (a)
a <- installed.packages()
view(a)
View(a)
x<-2
x <- 1
print(x)
x <- 1
x<-2
print(x)
x
#Aqui se esta realizando una asignacion.
x <- 1
x <- 2
#La asignacion no me permitio visualizar el resultado, para ello tube que pedir una solicitud explicita.
print(x)
#Al poner mayuscula, que no ha sido definida, se marcara error
print(X)
#La alternativa es solicitar una impresion implicita
x
#La asignacion tambien puede ser de textos
msg <- "Hola"
print(msg)
x <- #Expresion incompleta
x <- #Expresion incompleta
3
x <- #Expresion incompleta
#Trabajos de arreglos o impresion de un arreglo
x <- 1:20
x
y <- 3:9
y
z <- 99:43
z
w <- 3;14.5
w
w <- 3;14.5
w
w
w
w
w <- 3:14.5
w
x
z
#En el caso de trabajar con decimales me genera secuencias hasta los enteros correspondientes.
inf
Inf
exp(-Inf)
1/0
Inf-Inf
Inf+Inf
Inf*Inf
Inf/Inf
t
#Es posible crear un vector con la funcion c()
x <- (TRUE, FALSE, TRUE, TRUE, F, F, T)
#Es posible crear un vector con la funcion c()
x <- ( TRUE, FALSE, TRUE, TRUE, F, F, T)
#Es posible crear un vector con la funcion c()
x <- c( TRUE, FALSE, TRUE, TRUE, F, F, T)
x
x <- c(1L, 3L, 5L, -4L)
x <- c(1,3,5,-4)
x <- c(1+1i, 3+4i, -5-4i, 3.14-1.618i)
x <- c("a", "b", "c", "Hola", "Mundo")
x <- c(1,3,5,-4,3.14598650)
#Otro posible camino seria con la funcion vector
x <- vactor("Numeric", lenght = 10)
#Otro posible camino seria con la funcion vector
x <- vactor("numeric", lenght = 10)
#Otro posible camino seria con la funcion vector
x <- vector("numeric", lenght = 10)
x
#Otro posible camino seria con la funcion vector
x <- vector("numeric", lenght = 10)
#Otro posible camino seria con la funcion vector
x <- vector("numeric", length = 10)
x
y <- c(1.7, "a")
y <- c(True, 2)
y <- c(True, 2L)
y <- c(TRUE, 2L)
y <- c(TRUE, 2L, 2)
y <- c(FALSE, 2L, 5, 5+4i)
x
x
x
x
x <- list(1, "a", True, 3+2i, 5L)
x
x
x <- list(1, "a", TRUE, 3+2i, 5L)
x
1:50
x
x
matrix?
exit
? matrix
#Matrices
m <- matrix(nrow = 2, ncol = 3)
m
m
dim(m)
attributes(m)
m <- matrix(data=1:6, nrow = 2, ncol = 3)
m <- matrix(1:6, 2, 3)
m
m <- matrix(1:6, 2, 3)
m
m <- matrix(data=1:6, nrow = 2, ncol = 3, byrow = TRUE)
m <- matrix(1:6,2,3,T)
m
m <- matrix(1:6,2,3,T)
m
m <- 1:10
m
dim(m) <- c(2,5)
m
dim(m) <- c(2,5,T)
m
#CBind, unie columnas
cbind(x,y)
x <- 1:3
y <- 10:12
#CBind, unie columnas
cbind(x,y)
rbind(x,y)
x
x <- factor(c("Si", "Si", "No", "No" ,"Si"))
x
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"))
x
table(x)
unclass(x)
?factor
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"), levels("Rojo", "Amarillo", "Verde", "Naranja"))
x
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"), levels("Rojo", "Amarillo", "Verde", "Azul"))
x
x
unclass(x)
unclass(x)
x <- factor(c("Azul", "Verde", "Verde", "Azul", "Rojo"), levels=c("Rojo", "Amarillo", "Verde", "Azul"))
x
unclass(x)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x <- c(1,2,NA,10,3)
is.na(x)     #valor faltante detectado
is.nan(x)    #Valor no numerico que no es faltante
y <- c(1,2,NaN,10,3)
is.na(y)     #valor faltante detectado
is.nan(y)    #Valor no numerico que no es faltante
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
x
nrow(x)
ncol(x)
x <- data.frame(foo = 1:4, bar = c(T,T,F,F), TRUE)
x
?data.frame
x <- data.frame(foo = 1:4, bar = c(T,T,F,F), check.rows = TRUE)
x
x <- data.frame(foo = 1:4, bar = c(T,T,F,F), check.rows = FALSE)
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "smurf")
x
names(x)
x <- list(a=1,b=2,c=3)
x
#Matrices
x <- matrix(1:4, nrow = 2, ncol = 2)
x <- matrix(1:4, nrow = 2, ncol = 2)
x
?read.table
read.table(file, header = FALSE, sep = "", quote = "\"'",
dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
row.names, col.names, as.is = !stringsAsFactors,
na.strings = "NA", colClasses = NA, nrows = -1,
skip = 0, check.names = TRUE, fill = !blank.lines.skip,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown", text, skipNul = FALSE
fileEncoding = "", encoding = "unknown", text, skipNul = FALSE
cocos <- 5
cocos
#Con clclasses podemos identificar la clase de los primeros valores y luego
#se lo asigno a los demas valores faltantes.
dput
#Con clclasses podemos identificar la clase de los primeros valores y luego
#se lo asigno a los demas valores faltantes.
dput("datos.txt")
y <- data.frame(a=1,b="a")
y
dput(y)
#dput tradujo el objeto y en la linea de codigo
dput(y, file = "~/Tarea/y.R")
mtcars
mtcars
y <- data.frame(a=1,b="a")
y
#Estudio la manera en la que se guardara
dput(y)
t <- data.frame(a=mtcars)
t
dput (t)
#2 Guardar el objeto
dput(t, file = "~/Tarea/Carros.R")
#Creacion de un nuevo objeto
CarrosTonatiuh <- dget(file="~/Tarea/Carros.R")
